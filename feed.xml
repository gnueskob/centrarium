<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Don't be Expert Beginner</title>
    <description>This blog is designed to share server programming information.
</description>
    <link>http://gnueskob.github.io/</link>
    <atom:link href="http://gnueskob.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 09 Oct 2019 11:54:35 +0900</pubDate>
    <lastBuildDate>Wed, 09 Oct 2019 11:54:35 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Android default Webview 설정</title>
        <description>&lt;p&gt;안드로이드 기반 핸드폰에서 기본 Webview를 사용해야 할 경우가 있다.&lt;/p&gt;

&lt;p&gt;아래의 순서로 진행하면 Android System Webview를 사용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;개발자 모드&lt;/h2&gt;

&lt;p&gt;Webview 설정을 변경하려면 개발자 모드에 진입해야 한다.&lt;/p&gt;

&lt;p&gt;기본적으로 개발자모드는 숨겨져있으며 히든 커맨드를 통해 열 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/1.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 상단 설정 메뉴에 진입한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/2.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만약 이전에 개발자모드를 켜놓았으면 위와 같이 개발자모드 메뉴가 활성화 되어있을 것이다.&lt;/p&gt;

&lt;p&gt;하지만 보통의 경우 개발자모드가 비활성화 상태이므로 &lt;strong&gt;휴대전화 정보 &amp;gt; 소프트웨어 정보&lt;/strong&gt;메뉴에서 히든 커맨드를 입력해야 한다.&lt;/p&gt;

&lt;p&gt;아래의 순서로 소프트웨어 정보 설정까지 진입해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/3.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/4.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/5.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;소프트웨어 정보 설정까지 진입했다면 핸드폰에 대한 여러가지 상세정보들이 보일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;빌드 번호&lt;/strong&gt; 정보를 여러번 클릭하다보면 클릭 횟수에 따라서 &lt;strong&gt;개발 설정 완료 X단계 전입니다&lt;/strong&gt; 라는 문구가 팝업된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/5-1.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이것이 &lt;strong&gt;개발자 모드&lt;/strong&gt;를 활성화 시키는 히든 커맨드이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/5-2.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;충분히 클릭하여 개발자 모드를 활성화 시키면 아래와 같이 개발자 모드로 진입할 수 있는 메뉴가 추가되었을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/6.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;webview--&quot;&gt;WebView 구현 변경&lt;/h2&gt;

&lt;p&gt;개발자 모드 설정으로 진입하면 &lt;strong&gt;WebView 구현&lt;/strong&gt;이라는 설정이 보일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/7.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 핸드폰의 Webview 설정 상태를 확인할 수 있으며 이 설정은 사용자마다 다르고 보통은 Android System WebView를 사용하지 않고 추가로 설치한 애플리케이션을 사용 중인 경우가 많다.&lt;/p&gt;

&lt;p&gt;작성자의 현재 설정은 &lt;strong&gt;크롬(Chrome)&lt;/strong&gt;이지만 다른 어플리케이션으로 설정되어있어도 동일한 방법으로 변경이 가능하다.&lt;/p&gt;

&lt;p&gt;개발자 모드의 &lt;strong&gt;WebView 구현&lt;/strong&gt; 설정탭에서는 직접 Android System WebView로 변경할 수 없기 때문에 사용중인 WebView 어플리케이션을 잠시 비활성화 시켜야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/8.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 어플리케이션을 비활성화 시키면 자동적으로 핸드폰의 WebView 구현은 Android System WebView로 변경된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/9.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;초기 설정메뉴에서 &lt;strong&gt;어플리케이션&lt;/strong&gt; 설정으로 진입하여 자신의 WebView 구현에 사용되고 있는 어플리케이션을 찾는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/10.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어플리케이션을 찾고 클릭하면 해당 어플리케이션 정보 메뉴로 진입할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/11.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;크롬의 경우는 &lt;strong&gt;사용 중지&lt;/strong&gt; 버튼을 눌러 비활성화 시킬 수 있다.&lt;/p&gt;

&lt;p&gt;이때 &lt;strong&gt;초기 버전으로 바꿀지 묻는 다이얼로그&lt;/strong&gt;가 나타나는데, &lt;strong&gt;취소&lt;/strong&gt;를 눌러도 사용 중지는 진행되므로 크롬 사용 데이터를 지우지 않을 것이라면 취소를 누르자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/11-1.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 앱을 성공적으로 &lt;strong&gt;사용 중지&lt;/strong&gt; 했다면 핸드폰에서는 해당 앱의 아이콘도 사라져있을 것이며, 다시 개발자모드 WebView 구현으로 가보면 안드로이드 기본 WebView로 설정되어있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/android_webview/12.jpg&quot; alt=&quot;img&quot; style=&quot;max-width: 50%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Android System WebView가 필요한 작업을 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;Android System WebView를 이용한 작업을 끝낸 후에는 이전에 사용중지 시켰던 애플리케이션을 다시 &lt;strong&gt;사용&lt;/strong&gt;으로 바꾸어 활성화 시켜주면 WebView 구현 설정도 이전으로 되돌릴 수 있다.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Oct 2019 11:10:00 +0900</pubDate>
        <link>http://gnueskob.github.io/daily-life/2019/10/09/webview.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/daily-life/2019/10/09/webview.html</guid>
        
        
        <category>daily-life</category>
        
      </item>
    
      <item>
        <title>C++ 01 - 표현식과 문장 (1)</title>
        <description>&lt;p&gt;그간 사용해오던 언어들을 다시 정리하고 애매모호한 내용들을 바로잡기 위한 글입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;표현식&lt;/h2&gt;

&lt;p&gt;모든 변수의 이름, 상수, 리터럴은 표현식이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;연산자로 결합한 하나 이상의 표현식들은 표현식을 구성한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x + y&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x * y + z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;또한 할당문도, 입출력 작업도 표현식이다. 표현식을 다른 할당문 안에 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x = y + z&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x = y = z + 1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;std::cout &amp;lt;&amp;lt; &quot;x is &quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;표현식을 인자로 넣은 함수 호출도 마찬가지로 표현식이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;abs(x)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;abs(x * y + z)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pow(abs(x), y)&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;문장&lt;/h2&gt;

&lt;p&gt;끝에 세미콜론(&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;)이 오는 표현식들이 문장이다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;마지막 &lt;code class=&quot;highlighter-rouge&quot;&gt;x + y;&lt;/code&gt;도 문장이지만 계산한뒤 값을 사용하지 않고 날려버린다.&lt;/p&gt;

&lt;p&gt;최신 컴파일러는 이런 쓸모없는 계산도 최적화해주기도 한다.&lt;/p&gt;

&lt;p&gt;만약 사용자 정의 타입의 개체로 덧셈등을 직접 정의해서 사용한다면 쓸모없는 계산이 아니게 될 수도 있다.&lt;/p&gt;

&lt;p&gt;하나의 세미콜론은 빈 문장이며 세미클론만으로도 유효한 문장 하나이다.&lt;/p&gt;

&lt;p&gt;함수 정의같은 &lt;strong&gt;복합문&lt;/strong&gt;은 세미콜론으로 끝나지 않는다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;분기문&lt;/h2&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Modern C++ 입문, 피터고츠슐링&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 07 Sep 2019 18:42:00 +0900</pubDate>
        <link>http://gnueskob.github.io/language/2019/09/07/lec09.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/language/2019/09/07/lec09.html</guid>
        
        <category>cpp</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>C++ 01 - 연산자 (5)</title>
        <description>&lt;p&gt;그간 사용해오던 언어들을 다시 정리하고 애매모호한 내용들을 바로잡기 위한 글입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;변환 규칙&lt;/h2&gt;

&lt;p&gt;정수, 부동 소수점, bool 타입은 서로 변환 가능하다.&lt;/p&gt;

&lt;p&gt;이때 다른 타입으로 변환하면서 원래 가지고 있던 값이 보존될 수도 있고, 아닐 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Value-preserving&lt;/strong&gt; - 원래 타입으로 변환 했을때 값이 보존되는 경우&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Narrowing&lt;/strong&gt; - 변환으로 인해 값이 손실되는 경우&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;승격&lt;/h2&gt;

&lt;p&gt;값을 보존하는 암시적 변환을 승격(&lt;strong&gt;Promotion&lt;/strong&gt;)이라고 한다.&lt;/p&gt;

&lt;p&gt;짧은 범위의 정수, 부동소수점 값은 더 긴 범위를 갖는 정수, 부동소수점으로 변환될 수 있다.&lt;/p&gt;

&lt;p&gt;하드웨어에서 가장 잘 지원하는 타입 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;로 변환하는 것은 가능한 경우 더 긴 범위를 갖는 타입보다 우선한다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;정수 승격&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;가 원본 타입의 모든 값을 나타낼 수 있을때
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(unsigned) char&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;(unsigned) short int&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;로 변환된다.&lt;/li&gt;
      &lt;li&gt;그렇지 않은 경우엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned int&lt;/code&gt;로 변환된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;char16_t&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;char32_t&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wchar_t&lt;/code&gt; 혹은 일반 열거 타입은 원본 타입의 모든 값을 나타낼 수 있는 다음 타입 중 첫 번째 타입으로 변환된다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned long&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned long long&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;가 비트 필드의 모든 값을 나타낼 수 있다면 비트 필드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;로 변환된다.
    &lt;ul&gt;
      &lt;li&gt;그렇지 않은 경우엔 같은 조건에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned int&lt;/code&gt;로 변환된다.&lt;/li&gt;
      &lt;li&gt;조건을 만족시키지 않으면 승격이 적용되지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;로 변환된다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;으로, &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;로 변환된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;다른 변환&lt;/h2&gt;

&lt;p&gt;C++ 다음 축소 변환을 암시적으로 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정수나 일반 열거 타입은 모든 정수 타입으로 변환될 수 있다.
    &lt;ul&gt;
      &lt;li&gt;대상 타입의 범위가 더 짧다면 선행 비트가 잘린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;부동소수점 값은 범위가 더 짧은 부동소수점 타입으로 변환될 수 있다.
    &lt;ul&gt;
      &lt;li&gt;원본 값이 두 대상값 사이에 있으면 그 중 하나의 타입이 된다.&lt;/li&gt;
      &lt;li&gt;그렇지 않으면, 정의되지 않은 동작을 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;포인터 &amp;amp; 레퍼런스
    &lt;ul&gt;
      &lt;li&gt;개체 타입을 가리키는 포인터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;void*&lt;/code&gt;로 변환될 수 있다.&lt;/li&gt;
      &lt;li&gt;반대로 함수나 멤버를 가리키는 포인터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;void*&lt;/code&gt;로 변환될 수 없다.&lt;/li&gt;
      &lt;li&gt;파생 클래스를 가리키는 포인터/레퍼런스는 기본 베이스 클래스를 가리키는 포인터/레퍼런스로 암시적 변활될 수 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;을 반환하는 표현식은 모든 포인터 타입으로 변환되어 &lt;code class=&quot;highlighter-rouge&quot;&gt;nullptr&lt;/code&gt;가 될 수 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;T*&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;const T*&lt;/code&gt;으로, &lt;code class=&quot;highlighter-rouge&quot;&gt;T&amp;amp;&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;const T&amp;amp;&lt;/code&gt;로 변환될 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;포인터, 정수 및 부동소수점 값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt;값으로 변환될 수 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;가 되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;이 아닌값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;가 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정수 ↔ 부동소수점
    &lt;ul&gt;
      &lt;li&gt;부동소수점을 정수로 변환하면 소수 부분은 버려진다.&lt;/li&gt;
      &lt;li&gt;값이 너무 커서 표시할 수 없는 경우라면 정의되지 않은 동작을 한다.&lt;/li&gt;
      &lt;li&gt;정수에서 부동소수점 타입으로의 변환은 대상 타입에서 표현 가능할 때 정확하게 변환된다.&lt;/li&gt;
      &lt;li&gt;그렇지 않은 경우, 다음으로 더 낮은(혹은 더 높은) 부동소수점 값을 갖게된다.&lt;/li&gt;
      &lt;li&gt;부동소수점 타입으로 변환하기에 값이 너무 큰 경우는 정의되지 않은 동작을 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;일반적인 산술 변환&lt;/h2&gt;

&lt;p&gt;다음 변환은 이진 연산자의 피연산자에서 수행되어 결과 타입으로 사용하는 공통 타입으로 변환된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;두 피연산자 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;long double&lt;/code&gt;이면 다른 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;long double&lt;/code&gt;로 변환된다.
    &lt;ul&gt;
      &lt;li&gt;두 피연산자 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;이면, 다른 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;로 변환된다.&lt;/li&gt;
      &lt;li&gt;두 피연산자 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;이면, 다른 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;로 변환된다.&lt;/li&gt;
      &lt;li&gt;그렇지 않으면, 두 피연산자에 대헤 정수승격을 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그 외에 두 피연산자 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned long long&lt;/code&gt;이면, 다른 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned long long&lt;/code&gt;으로 변환된다.
    &lt;ul&gt;
      &lt;li&gt;하나의 피연산자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;long long&lt;/code&gt;이고 다른 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned long&lt;/code&gt;이면
        &lt;ul&gt;
          &lt;li&gt;후자가 전자의 모든 값을 나타낼 수 있는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned long&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;long long&lt;/code&gt;으로 변환된다.&lt;/li&gt;
          &lt;li&gt;그렇지 않으면 두 피연산자 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned long long&lt;/code&gt;으로 변환된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;하나의 피 연산자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt;이고 다른 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned&lt;/code&gt;이면,
        &lt;ul&gt;
          &lt;li&gt;후자가 전자의 모든 값을 나타낼 수 있는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt;으로 변환된다.&lt;/li&gt;
          &lt;li&gt;그렇지 않으면 두 피연산자 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned long&lt;/code&gt;으로 변환된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;두 피연산자 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt;이면, 다른 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt;으로 변환된다.&lt;/li&gt;
      &lt;li&gt;두 피연산자 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned&lt;/code&gt;이면, 다른 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigend&lt;/code&gt;으로 변환된다.&lt;/li&gt;
      &lt;li&gt;그렇지 않으면, 두 피연산자 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;로 변환된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결과적으로 변환 규칙은 정수 타입의 크기에 의존하기 때문에, 부호가 있는 정수와 부호가 없는 정수가 혼합된 프로그램은 플랫폼에 따라 서로 다른 동작을 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;축소&lt;/h2&gt;

&lt;p&gt;축소 변환(Narrowing Conversion)은 암시적 변환이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;부동소수점 타입에서 정수 타입으로의 변환&lt;/li&gt;
  &lt;li&gt;원본이 상수 표현식이고 변환 후의 실제 값이 표현할 수 있는 값의 범위 내에 있는 경우를 제외하고는 &lt;code class=&quot;highlighter-rouge&quot;&gt;long double&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt; 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;로 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;로 변환된다.&lt;/li&gt;
  &lt;li&gt;정수 타입이나 범위가 지정되지 않은 열거 타입에서 부동소수점 타입으로의 변환
    &lt;ul&gt;
      &lt;li&gt;원본이 상수 표현식이며 변환 후에 실제 값이 대상 타입에 맞고 Value-preserving일 때는 제외한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정수 타입이나 범위가 지정되지 않은 열거 타입에서 모든 값을 나타낼 수 없는 정수 타입으로의 변환
    &lt;ul&gt;
      &lt;li&gt;원본이 상수 표현식이며 변환 후에 실제 값이 대상 타입에 맞고 Value-preserving일 때는 제외한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Modern C++ 입문, 피터고츠슐링&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 07 Sep 2019 10:11:00 +0900</pubDate>
        <link>http://gnueskob.github.io/language/2019/09/07/lec08.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/language/2019/09/07/lec08.html</guid>
        
        <category>cpp</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>C++ 01 - 연산자 (4)</title>
        <description>&lt;p&gt;그간 사용해오던 언어들을 다시 정리하고 애매모호한 내용들을 바로잡기 위한 글입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;연산자 우선순위&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;표기법&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;결합성&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;괄호 안의 표현식&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;( expr )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;람다식&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;[capture_list] lambda_declarator { stmt_list }&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;범위 지정&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;class_name::member&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;범위 지정&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;namespace_name::member&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;전역 네임스페이스&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;::name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;전역 네임스페이스&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;::qualified_name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;멤버 선택&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;object.member&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;역참조된 멤버 선택&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;pointer -&amp;gt; member&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;첨자 지정&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr [ expr ]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;첨자 지정 (사용자 정의)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;object [ expr ]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;함수 호출&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr ( expr_list ), expr { expr_list }&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;값 생성&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;type ( expr_list ), expr { expr_list }&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;후위 증가&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue ++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;후위 감소&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue –&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;타입 식별&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;typeid ( type )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;런타임 타입 식별&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;typeid ( expr )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;런타임에 확인한 뒤 변환&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dynamic_cast &amp;lt; type &amp;gt; ( expr )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;컴파일 타임에 확인한 뒤 변환&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;static_cast &amp;lt; type &amp;gt; ( expr )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;확인하지 않고 변환&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;reinterpret_cast &amp;lt; type &amp;gt; ( expr )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;const 변환&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;const_cast &amp;lt; type &amp;gt; ( expr )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;개체의 크기&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sizeof expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;타입의 크기&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sizeof ( type )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;인수의 개수&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sizeof… ( args_pack )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;타입 인수의 개수&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sizeof… ( type_pack )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;맞춤&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;alignof ( expr )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;타입의 맞춤&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;alignof ( type )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;전위 증가&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;++ lvalue&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;전위 감소&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;– rvalue&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;보수&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;~ expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;부정&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;! expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;단항 뺄셈&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;- expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;단항 덧셈&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;+ expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;~의 주소&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp; expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;역참조된 멤버 선택&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;* expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;생성 (할당)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;new type&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;생성 (할당 및 초기화)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;new type ( expr_list )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;생성 (배치)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;new ( expr_list ) type&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;생성 (배치 및 초기화)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;new ( expr_list ) type ( expr_list )&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;삭제 (할당 해제)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delete pointer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;배열 삭제&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delete [] pointer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C-스타일 형 변환&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;( type ) expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;멤버 선택&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;object.* pointer_to_member&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;멤버 선택&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;object-&amp;gt;* pointer_to_member&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;곱셈&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr * expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;나눗셈&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr / expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;나머지&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr % expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;덧셈&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr + expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;뺄셈&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr - expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;왼쪽 시프트&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr « expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;오른쪽 시프트&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr » expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;작다&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr &amp;lt; expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;작거나 같다&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr &amp;lt;= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;크다&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr &amp;gt; expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;크거나 같다&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr &amp;gt;= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;같다&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr == expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;같지 않다&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr != expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;비트 AND&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr &amp;amp; expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;비트 XOR&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr ^ expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;비트 OR&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr | expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;논리 AND&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr &amp;amp;&amp;amp; expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;논리 OR&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr || expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;조건부 표현식&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr ? expr : expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;간단한 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue = expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;곱셈 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue *= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;나눗셈 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue /= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;나머지 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue %= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;덧셈 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue += expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;뺄셈 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue -= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;왼쪽 시프트 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue «= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;오른쪽 시프트 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue »= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;비트 AND 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue &amp;amp;= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;비트 OR 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;= expr&lt;/td&gt;
      &lt;td&gt;→&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;비트 XOR 및 할당&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lvalue ^= expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;→&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;예외 던지기&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;throw expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;쉼표 (연속)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;expr, expr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;←&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Modern C++ 입문, 피터고츠슐링&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 06 Sep 2019 23:52:00 +0900</pubDate>
        <link>http://gnueskob.github.io/language/2019/09/06/lec07.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/language/2019/09/06/lec07.html</guid>
        
        <category>cpp</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>C++ 01 - 연산자 (3)</title>
        <description>&lt;p&gt;그간 사용해오던 언어들을 다시 정리하고 애매모호한 내용들을 바로잡기 위한 글입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;흐름 제어 연산자&lt;/h2&gt;

&lt;p&gt;C++에서 함수 호출은 연산자처럼 처리한다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;조건 연산자&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;삼항 연산자는 조건 c를 통해 참이면 x, 거짓임녀 y를 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;문(&lt;strong&gt;statment&lt;/strong&gt;)이 아닌 표현식만 사용할 수 있는 곳에서는 유용하다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;콤마 연산자&lt;/h3&gt;

&lt;p&gt;순차적인 계산을 제공하는 C++에서 특별한 연산자이다.&lt;/p&gt;

&lt;p&gt;콤마의 왼쪽에 있는 하위 표현식을 먼저 처리한 뒤 오른쪽에 있는 하위 표현식을 처리하는 것이다.&lt;/p&gt;

&lt;p&gt;표현식 전체의 값은 오른쪽 하위 표현식의 결과이다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;표현식의 결과는 &lt;code class=&quot;highlighter-rouge&quot;&gt;7 * 9.3&lt;/code&gt;의 결과인 &lt;code class=&quot;highlighter-rouge&quot;&gt;65.1&lt;/code&gt;이며 &lt;code class=&quot;highlighter-rouge&quot;&gt;3 + 4&lt;/code&gt;는 계산처리 되지만 결과값과 전혀 관련이 없다.&lt;/p&gt;

&lt;p&gt;하위 표현식에서도 콤마 연산자를 포함할 수 있어 여러 시퀀스를 하나의 표현식으로 구성할 수 있다.&lt;/p&gt;

&lt;p&gt;특히 하나의 표현식만 사용할 수 있는 곳에서도 유용하다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;메모리 처리&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; 연산자는 메모리를 할당하고 해제할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;접근 연산자&lt;/h2&gt;

&lt;p&gt;C++는 하위 구조 접근, (변수의 주소를 가져오는)참조, (주소를 통해 참조된 메모리에 접근하는)간접 참조를 위한 여러 가지 연산자들을 제공한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;표현식&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;멤버 선택&lt;/td&gt;
      &lt;td&gt;x.m&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;역참조된 멤버 선택&lt;/td&gt;
      &lt;td&gt;p-&amp;gt;m&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;첨자&lt;/td&gt;
      &lt;td&gt;x[i]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;역참조&lt;/td&gt;
      &lt;td&gt;*x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;멤버 역참조&lt;/td&gt;
      &lt;td&gt;x.*pm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;역참조된 멤버 역참조&lt;/td&gt;
      &lt;td&gt;p-&amp;gt;*pm&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;타입 처리&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;표현식&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;런타임 타입식별&lt;/td&gt;
      &lt;td&gt;typeid(x)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;타입 식별&lt;/td&gt;
      &lt;td&gt;typeid(t)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;오브젝트 크기&lt;/td&gt;
      &lt;td&gt;sizeof(x) or sizeof x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;타입의 크기&lt;/td&gt;
      &lt;td&gt;sizeof(t)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++11&lt;/code&gt; 인수의 개수&lt;/td&gt;
      &lt;td&gt;sizeof…(p)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++11&lt;/code&gt; 타입 인수의 개수&lt;/td&gt;
      &lt;td&gt;sizeof…(P)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++11&lt;/code&gt; 맞춤(Alignment)&lt;/td&gt;
      &lt;td&gt;alignof(x)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++11&lt;/code&gt; 타입의 맞춤&lt;/td&gt;
      &lt;td&gt;alignof(t)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof&lt;/code&gt; 연산자는 표현식에서 사용될 경우 괄호 없이 사용할 수 있는 유일한 연산자이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-6&quot;&gt;오류 처리 연산자&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt; 연산자를 통해 실행 시 예외를 발생시킬 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-7&quot;&gt;오버로딩 연산자&lt;/h2&gt;

&lt;p&gt;C++는 새로운 타입에 대해 연산자들을 정의할 수 있다.&lt;/p&gt;

&lt;p&gt;내장 타입들의 연산자는 변경할 수 없으나 내장 타입들이 정의한 타입과 어떻게 상호 작용할 지 정의할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;표현식&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;스코프(범위) 지정&lt;/td&gt;
      &lt;td&gt;::&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++17&lt;/code&gt; 멤버 선택&lt;/td&gt;
      &lt;td&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;포인터 멤버 선택&lt;/td&gt;
      &lt;td&gt;.*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;조건부&lt;/td&gt;
      &lt;td&gt;?:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;타입이나 오브젝트 크기&lt;/td&gt;
      &lt;td&gt;sizeof&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++11&lt;/code&gt; 인수의 개수&lt;/td&gt;
      &lt;td&gt;sizeof…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++11&lt;/code&gt; 타입이나 오브젝트의 메모리 맞춤&lt;/td&gt;
      &lt;td&gt;alignof&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;타입 식별자&lt;/td&gt;
      &lt;td&gt;typeid&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Modern C++ 입문, 피터고츠슐링&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 05 Sep 2019 22:53:00 +0900</pubDate>
        <link>http://gnueskob.github.io/language/2019/09/05/lec06.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/language/2019/09/05/lec06.html</guid>
        
        <category>cpp</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>C++ 01 - 연산자 (2)</title>
        <description>&lt;p&gt;그간 사용해오던 언어들을 다시 정리하고 애매모호한 내용들을 바로잡기 위한 글입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;불 연산자&lt;/h2&gt;

&lt;p&gt;논리 연산자와 관계 연산자가 존재하며 전부 &lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt; 타입을 반환한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;표현식&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Not&lt;/td&gt;
      &lt;td&gt;!x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;크다&lt;/td&gt;
      &lt;td&gt;x &amp;gt; y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;크거나 같다&lt;/td&gt;
      &lt;td&gt;x &amp;gt;= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;작다&lt;/td&gt;
      &lt;td&gt;x &amp;lt; y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;작거나 같다&lt;/td&gt;
      &lt;td&gt;x &amp;lt;= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;같다&lt;/td&gt;
      &lt;td&gt;x == y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;같지 않다&lt;/td&gt;
      &lt;td&gt;x != y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;논리 AND&lt;/td&gt;
      &lt;td&gt;x &amp;amp;&amp;amp; y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;논리 OR&lt;/td&gt;
      &lt;td&gt;x || y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위 표는 우선 순위별로 정렬되어있다.&lt;/p&gt;

&lt;p&gt;이진 관계, 논리 연산자는 산술 연산자보다 우선순위가 낮다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;4 &amp;gt;= 1 + 7&lt;/code&gt;의 표현식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 &amp;gt;= (1 + 7)&lt;/code&gt;로 처리된다.&lt;/p&gt;

&lt;p&gt;반대로, 논리 부정 단항 연산자 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;는 모든 이항 연산자보다 먼저 처리된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;비트 연산자&lt;/h2&gt;

&lt;p&gt;비트 연산자로 정수 탕비의 단일 비트를 검사하거나 조작할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;표현식&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NOT(1의 보수)&lt;/td&gt;
      &lt;td&gt;~x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;왼쪽 시프트&lt;/td&gt;
      &lt;td&gt;x « y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;오른쪽 시프트&lt;/td&gt;
      &lt;td&gt;x » y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;비트 AND&lt;/td&gt;
      &lt;td&gt;x &amp;amp; y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;비트 OR&lt;/td&gt;
      &lt;td&gt;x | y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;비트 XOR&lt;/td&gt;
      &lt;td&gt;x ^ y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위 표는 우선 순위별로 정렬되어있다.&lt;/p&gt;

&lt;p&gt;비트 연산자는 보통 시스템 프로그래밍이나 효율적인 알고리즘적인 요소에 주로 사용된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;할당 연산자&lt;/h2&gt;

&lt;p&gt;Lvalue의 값은 할당 연산자를 통해 설정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;의 타입과 &lt;code class=&quot;highlighter-rouge&quot;&gt;expr&lt;/code&gt;의 타입이 서로 일치하지 않을 때, 가능하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;expr&lt;/code&gt;의 타입을 강제 변환해서 할당하게 된다.&lt;/p&gt;

&lt;p&gt;할당 연산자는 오른쪽에서 왼쪽 순서(right-associative)로 결합한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;obj3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// obj3 = (obj2 = (obj1 = expr)));
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;또한 할당 연산자는 왼쪽 Lvalue를 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// OK, obj: 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;합성 할당 연산자&lt;/h2&gt;

&lt;p&gt;합성 할당 연산자들은 오른쪽에 있는 인수로 왼쪽의 Lvalue에게 산술 연산이나 비트 연산을 적용한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a = a + b;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;모든 할당 연산자는 모든 산술, 비트 연산자보다 더 낮은 우선순위를 가지므로 오른쪽에 있는 표현식은 항상 합성 할당 연산자를 수행하기 전에 먼저 계산된다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a = a * (b + c - d);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;표현식&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;단순 할당&lt;/td&gt;
      &lt;td&gt;x = y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;곱셈 후 할당&lt;/td&gt;
      &lt;td&gt;x *= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;나눗셈 후 할당&lt;/td&gt;
      &lt;td&gt;x /= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;나머지 후 할당&lt;/td&gt;
      &lt;td&gt;x %= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;덧셈 후 할당&lt;/td&gt;
      &lt;td&gt;x += y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;뺄셈 후 할당&lt;/td&gt;
      &lt;td&gt;x -= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;왼쪽 시프트 후 할당&lt;/td&gt;
      &lt;td&gt;x «= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;오른쪽 시프트 후 할당&lt;/td&gt;
      &lt;td&gt;x »= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AND 후 할당&lt;/td&gt;
      &lt;td&gt;x &amp;amp;= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OR 후 할당&lt;/td&gt;
      &lt;td&gt;x |= y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;XOR 후 할당&lt;/td&gt;
      &lt;td&gt;x ^= y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위 표는 우선 순위별로 정렬되어있다.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Modern C++ 입문, 피터고츠슐링&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 04 Sep 2019 22:42:00 +0900</pubDate>
        <link>http://gnueskob.github.io/language/2019/09/04/lec05.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/language/2019/09/04/lec05.html</guid>
        
        <category>cpp</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>C++ 01 - 연산자 (1)</title>
        <description>&lt;p&gt;그간 사용해오던 언어들을 다시 정리하고 애매모호한 내용들을 바로잡기 위한 글입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;C++에 내장된 연산자들은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;계산연산자
    &lt;ul&gt;
      &lt;li&gt;산술 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; …&lt;/li&gt;
      &lt;li&gt;불 연산자
        &lt;ul&gt;
          &lt;li&gt;비교 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; …&lt;/li&gt;
          &lt;li&gt;논리 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;비트 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; …&lt;/li&gt;
      &lt;li&gt;할당 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+=&lt;/code&gt; …&lt;/li&gt;
      &lt;li&gt;프로그램 흐름 연산자: 함수호출, &lt;code class=&quot;highlighter-rouge&quot;&gt;?:&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;메모리 처리 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;접근 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; …&lt;/li&gt;
      &lt;li&gt;타입 처리 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic_cast&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;typeid&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;alignof&lt;/code&gt; …&lt;/li&gt;
      &lt;li&gt;오류 처리 연산자: &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;일부 연산자는 적절한 언어 기능과 함께 설명하는 것이 더 이해하기 쉬우므로 넘어간다.&lt;/p&gt;

&lt;p&gt;대부분의 연산자는 사용자 정의 타입에서 오버로드할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;산술 연산자&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연산&lt;/th&gt;
      &lt;th&gt;표현식&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;후위 증가&lt;/td&gt;
      &lt;td&gt;x++&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;후위 감소&lt;/td&gt;
      &lt;td&gt;x–&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;전위 증가&lt;/td&gt;
      &lt;td&gt;++x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;전위 감소&lt;/td&gt;
      &lt;td&gt;–x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;단항 덧셈&lt;/td&gt;
      &lt;td&gt;+x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;단항 뺄셈&lt;/td&gt;
      &lt;td&gt;-x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;곱셈&lt;/td&gt;
      &lt;td&gt;x * y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;나눗셈&lt;/td&gt;
      &lt;td&gt;x / y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;나머지&lt;/td&gt;
      &lt;td&gt;x % y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;이항 덧셈&lt;/td&gt;
      &lt;td&gt;x + y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;이항 뺄셈&lt;/td&gt;
      &lt;td&gt;x - y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위 표는 우선 순위별로 정렬되어있다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;증감 연산자&lt;/h3&gt;

&lt;p&gt;증감 연산은 수정 가능하고 주소를 지정할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lvalue&lt;/code&gt;에만 적용가능하다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// i: Lvalue, 3: Rvalue
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// OK
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;전위 증감 연산자는 수정된 값을 반환하고, 후위 증감 연산자는 기존 값을 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// i: 4, k: 7
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// j: 4, l: 8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;더 정확하게 말하자면, 전위 증감 연산자는 수정된 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lvalue&lt;/code&gt;를 반환하고 후위 증감 연산자는 기존 값을 갖는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rvalue&lt;/code&gt;를 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// OK
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// error C2106:  '=': 왼쪽 피연산자는 l-value이어야 합니다.
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 후의 증감 연산자가 더 우선순위가 높음
// 때문에 i-- 연산으로 먼저 Rvalue를 반환
// ++(i--) 연산은 ++(Rvalue)와 같으므로 컴파일 에러
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// error C2105:  '++'에 l-value가 필요합니다.
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;때문에 증감 연산자는 다른 연산 수식에 함께 사용하는 것을 지양해야 한다.&lt;/p&gt;

&lt;p&gt;수식 자체가 사이드 이펙트를 갖지 않아야 이해하기 쉽고 컴파일러가 최적화하기도 쉽다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;단항 연산자&lt;/h3&gt;

&lt;p&gt;단항 연산자는 일반 숫자에 적용시켜 부호를 바꿀수 있는 수준으로 표준 타입에는 아무런 영향을 주지 않는다.&lt;/p&gt;

&lt;p&gt;후위 증감 연산자와 마찬가지로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rvalue&lt;/code&gt;를 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// j: -3
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// error C2106:  '=': 왼쪽 피연산자는 l-value이어야 합니다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;다만 사용자 지정 타입에서 단항 연산자를 따로 정의하여 해당 타입에 대한 덧셈, 뺄셈 동작을 정의할 수 있다.&lt;/p&gt;

&lt;p&gt;일반적으로 단항 연산자가 이항 연산자보다 우선 순위가 높다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;[Modern C++ 입문, 피터고츠슐링]&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;접두사, 접미사에 단항 표기법을 모두 적용한 경우 접두사의 단항 연산자가 더 우선순위가 높다&lt;/p&gt;

  &lt;hr /&gt;

  &lt;p&gt;&lt;strong&gt;TODO: 어떤 예시가 있는지 찾아볼 것…&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;전위, 후위 증감 연산자도 단항 연산자일텐데 후위가 먼저 적용됨(?)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-3&quot;&gt;곱셈, 나눗셈, 나머지&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; 연산자는 모든 숫자 타입에 정의되어 있다.&lt;/p&gt;

&lt;p&gt;나눗셈은 정수끼리 수행될 때 소수부분을 버린다는 것을 숙지하자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; 연산자는 정수 나눗셈의 나머지를 산출하므로 두 인수 모두 정수형이여야 한다.&lt;/p&gt;

&lt;p&gt;일반 수학에서 처럼 사칙연산 순서가 동일하게 적용된다.&lt;/p&gt;

&lt;p&gt;수식에 곱셈, 나눗셈을 먼저 처리하고 덧셈, 뺄셈을 처리한다.&lt;/p&gt;

&lt;p&gt;연산은 왼쪽에서 오른쪽 순서로 결합(&lt;strong&gt;left-associative&lt;/strong&gt;)한다.&lt;/p&gt;

&lt;p&gt;중요한 것은 &lt;strong&gt;인수들의 계산 순서는 정의되지 않았다는 것&lt;/strong&gt;이다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 수식에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;f(++i) + g(++i)&lt;/code&gt; 덧셈이 &lt;code class=&quot;highlighter-rouge&quot;&gt;g(++i) + j&lt;/code&gt; 덧셈보다 먼저 계산될 것은 분명하다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;f(++i)&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;g(++i)&lt;/code&gt; 중 어느 표현식이 먼저 계산될 것인지는 컴파일러 구현에 따라 다르다.&lt;/p&gt;

&lt;p&gt;이항 연산의 두 인수가 서로 다른 타입을 가질 때에는 하나 혹은 두 인수가 규칙에 따라 타입이 자동 변환된다.&lt;/p&gt;

&lt;p&gt;이러한 변환은 정밀도 손실을 초래할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123456789012&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 123456789012
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 123456790527
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 123456789012
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;l2&lt;/code&gt;의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;l + 1.0f&lt;/code&gt;에 의해서 중간 변환으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; 타입으로 변환되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;1.23456791e+11&lt;/code&gt;값을 갖게된다.&lt;/p&gt;

&lt;p&gt;이 단계에서 정밀도 손실이 발생되기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;(double) 1.0&lt;/code&gt;값을 빼도 원래 값으로 복원되지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Modern C++ 입문, 피터고츠슐링&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 02 Sep 2019 23:57:00 +0900</pubDate>
        <link>http://gnueskob.github.io/language/2019/09/02/lec04.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/language/2019/09/02/lec04.html</guid>
        
        <category>cpp</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>C++ 01 - 변수 (3)</title>
        <description>&lt;p&gt;그간 사용해오던 언어들을 다시 정리하고 애매모호한 내용들을 바로잡기 위한 글입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;C++는 여러 종류의 값을 구별한다.&lt;/p&gt;

&lt;h2 id=&quot;lvalue&quot;&gt;Lvalue&lt;/h2&gt;

&lt;p&gt;주로 대입 표현식의 왼쪽에 나타날 수 있기에 붙여진 이름이다.&lt;/p&gt;

&lt;p&gt;Lvalue는 함수나 개체같이 &lt;strong&gt;주소를 얻을 수 있는 요소&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;즉, 표현식(expression)이후에도 없어지지 않고 유지된다.&lt;/p&gt;

&lt;p&gt;할당문을 수행할 때 대입 연산자의 왼쪽 편은 Lvalue이어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// OK
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// Error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;두번째 할당문의 값 5는 메모리 주소를 가지고 있지 않으므로 아무것도 할당할 수 없다.&lt;/p&gt;

&lt;h2 id=&quot;rvalue&quot;&gt;Rvalue&lt;/h2&gt;

&lt;p&gt;Lvalue와는 반대의 개념인 Rvalue는 만료된 값, 임시 개체나 그 하위 개체 또는 개체와 관련이 없는 값을 말한다.&lt;/p&gt;

&lt;p&gt;Lvalue 때와 마찬가지로 주로 대입 표현식의 오른쪽에 나타날 수 있기에 붙여진 이름이다.&lt;/p&gt;

&lt;p&gt;메모리 주소를 가지고 있지 않기 때문에 표현식 이후에는 더 이상 존재하지 않는 임시적인 값이다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// y를 정수 변수로 정의한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4(r-value)는 4로 평가되어지고, y(l-value)에 할당된다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2(r-value) + 5(r-value)는 7(r-value)로 평가되어지고, y(l-value)에 할당된다.
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x를 정수 변수로 정의한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// y(l-value)는 7로 평가되어지고, x(l-value)에 할당된다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x(l-value)는 7로 평가되어지고, x(l-value)에 할당된다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x(l-value) + 1(r-value)는 8(r-value)로 평가되어지고, x(l-value)에 할당된다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Modern C++ 입문, 피터고츠슐링&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://boycoding.tistory.com&quot;&gt;소년코딩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 01 Sep 2019 21:01:00 +0900</pubDate>
        <link>http://gnueskob.github.io/language/2019/09/01/lec03.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/language/2019/09/01/lec03.html</guid>
        
        <category>cpp</category>
        
        <category>variable</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>C++ 01 - 변수 (2)</title>
        <description>&lt;p&gt;그간 사용해오던 언어들을 다시 정리하고 애매모호한 내용들을 바로잡기 위한 글입니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;축소하지 않는 초기화&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1234567890123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;long 타입이 64비트인 아키텍쳐의 경우 위 코드는 문제없이 잘 컴파일 될 것이다.&lt;/p&gt;

&lt;p&gt;하지만 long의 크기가 32비트인 경우에는 위 리터럴 값은 할당하기에 너무 크다.&lt;/p&gt;

&lt;p&gt;컴파일은 가능하지만 경고 메시지와 함께 앞쪽 비트가 버려지게 될 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;c11&quot;&gt;&lt;strong&gt;C++11&lt;/strong&gt;&lt;/h3&gt;

  &lt;p&gt;C++11은 데이터가 손실되지 않음(값들이 축소되지않음, Not Narrowed)을 확인하는 초기화를 도입했다.&lt;/p&gt;

  &lt;p&gt;유니폼 초기화, 중괄호 초기화가 존재한다.&lt;/p&gt;

  &lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1234567890123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

  &lt;p&gt;중괄호 안에 있는 값들은 축소할 수 없으며 컴파일러는 변수 l이 타겟 아키텍쳐에서 갑을 저장할 수 있는지 확인할 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;컴파일러의 축소 보호는 값을 초기화할 때 정밀도를 잃지 않는다는 것을 확인시켜준다.&lt;/p&gt;

&lt;p&gt;즉, 묵시적 변환을 사용하지 않은 채 값을 그대로 저장할 수 없다면 에러를 유발시킨다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// warning C4244:  '초기화 중': 'double'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error C2397:  'double'에서 'int'(으)로의 변환에는 축소 변환이 필요합니다.
&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 컴파일러 가능 (위험)
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error C2397:  'int'에서 'unsigned int'(으)로의 변환에는 축소 변환이 필요합니다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;리터럴을 사용해서 초기화 할 때는 해당 리터럴 값이 해당 타입에서 표현할 수 있는지를 검사한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// warning C4305:  '초기화 중': 'double'에서 'float'(으)로 잘립니다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;double 타입의 3.14 리터럴 값은 모든 이진 부동 소수점 타입으로 나타낼 수는 없지만, 컴파일러는 3.14에 가장 가까운 값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;f1&lt;/code&gt;을 설정한다.&lt;/p&gt;

&lt;p&gt;특정 타입 변수나 (리터럴이 아닌) 상수에서 축소 보호 초기화를 할 때 모든 값들이 손실 없는 방식으로 변환가능한지 고려해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// error C2397:  'double'에서 'float'(으)로의 변환에는 축소 변환이 필요합니다.
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// error C2397:  'int'에서 'unsigned int'(으)로의 변환에는 축소 변환이 필요합니다.
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// error C2397:  'unsigned int'에서 'int'(으)로의 변환에는 축소 변환이 필요합니다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;범위&lt;/h2&gt;

&lt;p&gt;범위(Scope)는 변수, 상수의 수명과 가시성을 결정한다.&lt;/p&gt;

&lt;p&gt;모든 변수를 사용 하려면 사용 전에 타입 지정자와 함께 선언해야 한다.&lt;/p&gt;

&lt;p&gt;하나의 변수는 전역 범위(global scope)나 지역 범위(local scope)에 위치할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;전역 정의&lt;/h3&gt;

&lt;p&gt;전역 변수는 모든 함수의 바깥에 선언한다.&lt;/p&gt;

&lt;p&gt;전역 변수를 선언하고 나면 코드 어디에서나(함수 안에서도) 사용가능하다.&lt;/p&gt;

&lt;p&gt;변수를 쉽게 사용할 수 있지만, 프로그램의 규모가 커짐에 따라 전역 변수들을 추적하기가 어려워진다.&lt;/p&gt;

&lt;p&gt;때문에 가능하면 전역 변수 사용을 지양하는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;지역 정의&lt;/h3&gt;

&lt;p&gt;지역 변수는 함수 안에서 선언한다.&lt;/p&gt;

&lt;p&gt;해당 지역 변수의 수명은 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;로 둘러싸인 블록으로 제한된다.&lt;/p&gt;

&lt;p&gt;블록 외부(Out of scope)에서 지역 변수를 접근할 수 없다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159265358979323846264338327950288419716939&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159265358979323846264338327950288419716939&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// error C2065:  'pi2': 선언되지 않은 식별자입니다.
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// error C2065:  'pi': 선언되지 않은 식별자입니다.
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;숨기기&lt;/h3&gt;

&lt;p&gt;같은 이름의 변수가 중첩된 범위에 있으면 오직 하나의 변수만 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;안쪽 범위(가장 내부에 선언된 블록)에 있는 변수는 바깥 범위에 선언된 동일한 이름의 변수를 숨긴다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// a#1
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// a#1: 1
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// a#2 (a#1를 숨김)
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// a#2: 2
&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// a#3 (a#2를 숨김)
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// a#3: 3
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;// a#3: 11
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// a#3: 11
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a#3의 수명은 여기까지
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// a#2: 2 (a#3의 수명이 끝나고 다시 a#2를 바라봄)
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a#2의 수명은 여기까지
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// a#1: 1
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;각 변수의 가시성은 수명에서 숨겨질 때의 시간을 뺀 값이다.&lt;/p&gt;

&lt;p&gt;동일한 범위에 동일한 변수 이름을 두 번 이상 정의하면 오류가 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error C2374:  'a': 재정의. 여러 번 초기화했습니다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;범위의 장점은 변수가 범위 바깥 어딘가에 이미 정의되었는지 걱정할 필요가 없다는 것이다.&lt;/p&gt;

&lt;p&gt;앞서 정의된 변수는 숨겨지고 이로 인해 충돌을 피할 수 있지만 숨겨진 변수는 접근할 수가 없다.&lt;/p&gt;

&lt;p&gt;이름을 바꿈으로써 어느정도 해결할 수 있지만 네임 스페이스(Namespace)를 사용하는 것이 더 현명한 방법이다.&lt;/p&gt;

&lt;p&gt;static 변수는 이 규칙을 따르지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Modern C++ 입문, 피터고츠슐링&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 31 Aug 2019 20:57:00 +0900</pubDate>
        <link>http://gnueskob.github.io/language/2019/08/31/lec02.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/language/2019/08/31/lec02.html</guid>
        
        <category>cpp</category>
        
        <category>variable</category>
        
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>Visual Studio 2017 - C++ Debugger Visualizers</title>
        <description>&lt;p&gt;이번 글에서는 &lt;strong&gt;C++ Debugger Visualizers&lt;/strong&gt;에 대해 소개한다.&lt;/p&gt;

&lt;p&gt;VS2017 버전까지 지원하며 Boost, wxWidgets, TinyXML, TinyXML2 라이브러리를 지원한다.&lt;/p&gt;

&lt;p&gt;아직까지는 VS2019 버전은 지원하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ArkadyShapkin.CDebuggerVisualizersforVS2017&quot;&gt;Marketplace Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KindDragon/CPPDebuggerVisualizers/issues&quot;&gt;Github Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C++ Debugger Visualizers를 소개하기전에 먼저 Visualizers가 무엇인지 소개하고 넘어가겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;visualizers&quot;&gt;Visualizers&lt;/h2&gt;

&lt;p&gt;비주얼 스튜디오에서는 디버깅 중 개체위에 커서를 올리면 조사식처럼 개체 정보를 나타내주는 창(&lt;strong&gt;DataTip&lt;/strong&gt;)을 팝업시킨다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/dataTip.png&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;dataTip&quot;&gt;&lt;img src=&quot;/assets/visualStudio/dataTip.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;혹은 조사식에서도 동일하게 개체의 정보를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/watch.png&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;watch&quot;&gt;&lt;img src=&quot;/assets/visualStudio/watch.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;개체 정보중에 특정 타입의 경우에는 돋보기가 나타나며 클릭해보면 여러가지 &lt;strong&gt;시각화 도우미&lt;/strong&gt; 들이 목록에 나타날 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/visualizers.png&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;visualizers&quot;&gt;&lt;img src=&quot;/assets/visualStudio/visualizers.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이것이 Visualizer 이다.&lt;/p&gt;

&lt;p&gt;내장되어 있는 Visualizer는 총 4가지이며 이 Type의 개체를 디버깅 할때만 Visualizer가 발동된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Text&lt;/li&gt;
  &lt;li&gt;Html&lt;/li&gt;
  &lt;li&gt;Xml&lt;/li&gt;
  &lt;li&gt;DataSet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VS2005 버전 이후로는 내장된 Visualizer 이외에도 커스터마이징하여 자신만의 Visualizer를 제작할 수 있다.&lt;/p&gt;

&lt;p&gt;예로, 이미지개체를 처리할 때 실제로 이미지를 볼 수 있도록 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/imageVisualizer.jpg&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;ImgVisualizer&quot;&gt;&lt;img src=&quot;/assets/visualStudio/imageVisualizer.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;비주얼 스튜디오는 이렇게 디버깅 시 개발자가 빈번하게 접하는 데이터 시각화를 커스터마이징하는 기능을 제공한다.&lt;/p&gt;

&lt;p&gt;이를 통해 사용자 정의 시각화 모듈을 생성해 디버깅에 유용하게 활용할 수 있다.&lt;/p&gt;

&lt;p&gt;다음의 이미지를 통해 쉽게 이해할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/visualizer_before.png&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;visualizerBefore&quot;&gt;&lt;img src=&quot;/assets/visualStudio/visualizer_before.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;커스텀 데이터 시각화 적용 전&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/visualizer_after.png&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;visualizerAfter&quot;&gt;&lt;img src=&quot;/assets/visualStudio/visualizer_after.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;커스텀 데이터 시각화 적용 후&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;natvis-visualizer&quot;&gt;Natvis Visualizer&lt;/h2&gt;

&lt;p&gt;비주얼 스튜디오 디버깅 창의 ‘텍스트 시각화 사용자 정의 규칙’은 &lt;strong&gt;autoexp.dat&lt;/strong&gt; 파일을 통해 정의되는데, 이러한 문법을 통해 &lt;strong&gt;자동, 지역식, 조사식&lt;/strong&gt; 창에서 변수값을 조회할 수 있다.&lt;/p&gt;

&lt;p&gt;오랜 기간 비주얼 스튜디오를 사용했다면 비주얼 C++의 STL (Stan dard Template Library)로 고생했던 경험이 한 번쯤은 있을 것이다.&lt;/p&gt;

&lt;p&gt;예전에는 STL의 난해한 에러 코드와 경고 메시지, 텍스트 시각화로 인해 인스턴스를 포함한 멤버 변수를 찾는 데에만 상당한 시간이 걸렸기 때문이다.&lt;/p&gt;

&lt;p&gt;이러한 불편 때문인지 비주얼 스튜디오는 새로운 버전이 출시될 때마다 텍스트 시각화 기능이 점차 개선돼왔다.&lt;/p&gt;

&lt;p&gt;텍스트 시각화가 보기 편해졌을 뿐 아니라 디버깅 시에도 원하는 정보를 보다 쉽게 찾을 수 있게 됐다.&lt;/p&gt;

&lt;p&gt;이러한 변화의 중심에는 텍스트 사용자 정의 규칙의 업데이트가 있었다.&lt;/p&gt;

&lt;p&gt;VS 2012에서는 텍스트 시각화 사용자 정의 규칙이 대대적으로 개선됐다.&lt;/p&gt;

&lt;p&gt;기존 autoexp.dat를 이용한 정의 방식의 문제점을 보완하고, 개발자가 사용하기 쉽도록 xml 문법으로 규칙을 기술하도록 변경됐다.&lt;/p&gt;

&lt;p&gt;또한 텍스트 시각화 사용자 정의 규칙을 정의할 때 발생할 수 있는 문제점에 대한 추적도 한결 쉬워졌다.&lt;/p&gt;

&lt;p&gt;게다가 정의 파일에 대한 버전관리나 여러 파일로 나누어 프레임워크별, 규칙별, 프로젝트별로 규칙을 적용할 수 있는 &lt;strong&gt;Natvis&lt;/strong&gt; 프레임워크도 추가됐다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nativis 프레임워크를 통해 visualizer를 만드는 방법은 아래 링크를 참조&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019&quot;&gt;Create custom views of C++ objects in the debugger&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.kdata.or.kr/info/info_04_view.html?field=title&amp;amp;keyword=%BB%E7%BF%EB%C0%DA%20%C1%A4%C0%C7%20%C5%D8%BD%BA%C6%AE%20%BD%C3%B0%A2%C8%AD&amp;amp;type=techreport&amp;amp;page=1&amp;amp;dbnum=177748&amp;amp;mode=detail&amp;amp;type=techreport&quot;&gt;네이티브 환경에서 사용자 정의 텍스트 시각화 만들기 (1)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.kdata.or.kr/info/info_04_view.html?field=title&amp;amp;keyword=%BB%E7%BF%EB%C0%DA%20%C1%A4%C0%C7%20%C5%D8%BD%BA%C6%AE%20%BD%C3%B0%A2%C8%AD&amp;amp;type=techreport&amp;amp;page=1&amp;amp;dbnum=178647&amp;amp;mode=detail&amp;amp;type=techreport&quot;&gt;네이티브 환경에서 사용자 정의 텍스트 시각화 만들기 (2)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.kdata.or.kr/info/info_04_view.html?field=title&amp;amp;keyword=%BB%E7%BF%EB%C0%DA%20%C1%A4%C0%C7%20%C5%D8%BD%BA%C6%AE%20%BD%C3%B0%A2%C8%AD&amp;amp;type=techreport&amp;amp;page=1&amp;amp;dbnum=179747&amp;amp;mode=detail&amp;amp;type=techreport&quot;&gt;네이티브 환경에서 사용자 정의 텍스트 시각화 만들기 외전&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;c-debugger-visualizers&quot;&gt;C++ Debugger Visualizers&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;C++ Debugger Visualizers&lt;/strong&gt;는 여러가지 라이브러리를 위해 설계된 Visualizer이다.&lt;/p&gt;

&lt;p&gt;문서의 머릿말에 소개한 것 처럼 VS2017 버전까지 지원하며 Boost, wxWidgets, TinyXML, TinyXML2 라이브러리를 지원한다.&lt;/p&gt;

&lt;p&gt;하지만 아직까지는 VS2019 버전은 지원하지 않는다.&lt;/p&gt;

&lt;p&gt;VS2017 버전에서는 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ArkadyShapkin.CDebuggerVisualizersforVS2017&quot;&gt;Marketplace&lt;/a&gt;에서 쉽게 설치할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/debuggerVisualizer.png&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;debuggerVisualizer&quot;&gt;&lt;img src=&quot;/assets/visualStudio/debuggerVisualizer.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;해당 visualizer를 설치하고 지원하는 라이브러리를 사용해보면 디버깅을 보다 편히할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;아래 이미지는 boost 라이브러리의 multi-index를 사용하여 visualizer 유무 차이를 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/testMultiIndexVisualizer2.png&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;multiIndex2&quot;&gt;&lt;img src=&quot;/assets/visualStudio/testMultiIndexVisualizer2.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;boost library - multi-index 디버깅 테스트 (C++ Debugger Visualizers 적용 X)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;/assets/visualStudio/testMultiIndexVisualizer.png&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;multiIndex&quot;&gt;&lt;img src=&quot;/assets/visualStudio/testMultiIndexVisualizer.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;boost library - multi-index 디버깅 테스트 (C++ Debugger Visualizers 적용)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이처럼 visualizer를 통해 자신만의 디버깅 환경을 구축하여 보다 쉽고 빠르게 디버깅을 할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bangsil.net/MyPosts/?postId=13da98de-2d3f-4d03-80ba-8e422407f15b&quot;&gt;방실 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kdata.or.kr/info/info_04_view.html?field=title&amp;amp;keyword=%BB%E7%BF%EB%C0%DA%20%C1%A4%C0%C7%20%C5%D8%BD%BA%C6%AE%20%BD%C3%B0%A2%C8%AD&amp;amp;type=techreport&amp;amp;page=1&amp;amp;dbnum=177748&amp;amp;mode=detail&amp;amp;type=techreport&quot;&gt;한국 데이터 산업 진흥원&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019&quot;&gt;MicroSoft VS docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KindDragon/CPPDebuggerVisualizers/issues&quot;&gt;C++ Debugger Visualizers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 18 Aug 2019 19:00:00 +0900</pubDate>
        <link>http://gnueskob.github.io/editor/2019/08/18/debugger-visualizer-copy.html</link>
        <guid isPermaLink="true">http://gnueskob.github.io/editor/2019/08/18/debugger-visualizer-copy.html</guid>
        
        <category>editor</category>
        
        <category>visual-studio</category>
        
        <category>debug</category>
        
        <category>debugger-visualizer</category>
        
        
        <category>editor</category>
        
      </item>
    
  </channel>
</rss>
